#!/bin/bash
# =============================================================================
# ELEDIA SOLR MANAGEMENT SCRIPT - OPTIMIZED
# Version: 6.0 - Unified management for {{ customer_name }}
# Generated: {{ ansible_date_time.iso8601 }}
# =============================================================================

# Configuration
CUSTOMER="{{ customer_name | default(moodle_app_domain.split('.')[0]) }}"
CONTAINER_NAME="{{ solr_container_name | default('eledia_solr_' + customer_name) }}"
CORE_NAME="{{ solr_core_name | default('eledia_solr_' + customer_name) }}"
DOMAIN="{{ moodle_app_domain }}"
DATA_DIR="{{ solr_data_dir | default('/opt/eledia-solr-data/' + customer_name) }}"
BACKUP_DIR="{{ backup_base_dir | default('/opt/eledia-backups') }}/$CUSTOMER"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/solr-management.log
}

# Banner function
show_banner() {
    echo -e "${BLUE}================================================================${NC}"
    echo -e "${BLUE}üîß ELEDIA SOLR MANAGEMENT - VERSION 6.0${NC}"
    echo -e "${BLUE}================================================================${NC}"
    echo -e "${GREEN}Customer:${NC} $CUSTOMER"
    echo -e "${GREEN}Domain:${NC} $DOMAIN"
    echo -e "${GREEN}Container:${NC} $CONTAINER_NAME"
    echo -e "${GREEN}Core:${NC} $CORE_NAME"
    echo -e "${BLUE}================================================================${NC}"
    echo ""
}

# Status check function
check_status() {
    echo -e "${YELLOW}üîç Checking Solr status...${NC}"
    
    # Check if container exists and is running
    if docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep -q "^$CONTAINER_NAME$"; then
        echo -e "${GREEN}‚úÖ Container is running${NC}"
        
        # Check Solr API
        if curl -s http://localhost:8983/solr/admin/cores | grep -q "$CORE_NAME"; then
            echo -e "${GREEN}‚úÖ Solr API responding${NC}"
            echo -e "${GREEN}‚úÖ Core '$CORE_NAME' is available${NC}"
            
            # Get document count
            DOC_COUNT=$(curl -s "http://localhost:8983/solr/$CORE_NAME/select?q=*:*&rows=0" | grep -o '"numFound":[0-9]*' | cut -d: -f2)
            echo -e "${GREEN}üìä Documents indexed: ${DOC_COUNT:-0}${NC}"
            
            # Check last update
            LAST_UPDATE=$(docker exec $CONTAINER_NAME ls -la /var/solr/data/$CORE_NAME/data/index/ | tail -1 | awk '{print $6" "$7" "$8}')
            echo -e "${GREEN}üïí Last index update: $LAST_UPDATE${NC}"
            
            return 0
        else
            echo -e "${RED}‚ùå Solr API not responding or core missing${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå Container not running${NC}"
        return 1
    fi
}

# Start function
start_solr() {
    echo -e "${YELLOW}üöÄ Starting Solr...${NC}"
    
    if docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep -q "^$CONTAINER_NAME$"; then
        echo -e "${YELLOW}‚ö†Ô∏è Container already running${NC}"
        return 0
    fi
    
    if docker ps -a --format '{{ '{{' }}.Names{{ '}}' }}' | grep -q "^$CONTAINER_NAME$"; then
        docker start $CONTAINER_NAME
        log "Started existing container $CONTAINER_NAME"
    else
        echo -e "${RED}‚ùå Container does not exist. Please reinstall Solr.${NC}"
        return 1
    fi
    
    # Wait for Solr to be ready
    echo -e "${YELLOW}‚è≥ Waiting for Solr to be ready...${NC}"
    for i in {1..30}; do
        if curl -s http://localhost:8983/solr/admin/cores >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Solr is ready${NC}"
            return 0
        fi
        sleep 2
    done
    
    echo -e "${RED}‚ùå Solr failed to start within 60 seconds${NC}"
    return 1
}

# Stop function
stop_solr() {
    echo -e "${YELLOW}üõë Stopping Solr...${NC}"
    
    if docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep -q "^$CONTAINER_NAME$"; then
        docker stop $CONTAINER_NAME
        log "Stopped container $CONTAINER_NAME"
        echo -e "${GREEN}‚úÖ Solr stopped${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Container not running${NC}"
    fi
}

# Restart function
restart_solr() {
    echo -e "${YELLOW}üîÑ Restarting Solr...${NC}"
    stop_solr
    sleep 3
    start_solr
}

# Backup function
backup_solr() {
    echo -e "${YELLOW}üíæ Creating Solr backup...${NC}"
    
    if ! docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep -q "^$CONTAINER_NAME$"; then
        echo -e "${RED}‚ùå Container not running${NC}"
        return 1
    fi
    
    BACKUP_FILE="$BACKUP_DIR/solr/solr_backup_$(date +%Y%m%d_%H%M%S).tar.gz"
    mkdir -p "$BACKUP_DIR/solr"
    
    docker exec $CONTAINER_NAME tar czf /tmp/backup.tar.gz -C /var/solr/data $CORE_NAME
    docker cp $CONTAINER_NAME:/tmp/backup.tar.gz "$BACKUP_FILE"
    docker exec $CONTAINER_NAME rm /tmp/backup.tar.gz
    
    echo -e "${GREEN}‚úÖ Backup created: $BACKUP_FILE${NC}"
    log "Created backup: $BACKUP_FILE"
}

# Reindex function
reindex_moodle() {
    echo -e "${YELLOW}üîÑ Triggering Moodle reindex...${NC}"
    
    if ! check_status >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Solr not available${NC}"
        return 1
    fi
    
    # Clear existing index
    echo -e "${YELLOW}üóëÔ∏è Clearing existing index...${NC}"
    curl -s -X POST "http://localhost:8983/solr/$CORE_NAME/update?commit=true" \
         -H "Content-Type: text/xml" \
         --data-binary '<delete><query>*:*</query></delete>' >/dev/null
    
    echo -e "${GREEN}‚úÖ Index cleared. Please run Moodle search indexing from admin panel.${NC}"
    echo -e "${BLUE}üí° Navigate to: Site administration ‚Üí Plugins ‚Üí Search ‚Üí Manage global search${NC}"
    log "Index cleared for reindexing"
}

# Logs function
show_logs() {
    echo -e "${YELLOW}üìã Showing Solr logs...${NC}"
    
    if docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep -q "^$CONTAINER_NAME$"; then
        docker logs --tail 50 -f $CONTAINER_NAME
    else
        echo -e "${RED}‚ùå Container not running${NC}"
    fi
}

# Health check function
health_check() {
    echo -e "${YELLOW}üè• Running health check...${NC}"
    echo ""
    
    # Container status
    echo -e "${BLUE}üì¶ Container Status:${NC}"
    if docker ps --format 'table {{ '{{' }}.Names{{ '}}' }}\t{{ '{{' }}.Status{{ '}}' }}\t{{ '{{' }}.Ports{{ '}}' }}' | grep $CONTAINER_NAME; then
        echo ""
    else
        echo -e "${RED}‚ùå Container not found${NC}"
        echo ""
    fi
    
    # Resource usage
    echo -e "${BLUE}üíª Resource Usage:${NC}"
    if docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep -q "^$CONTAINER_NAME$"; then
        docker stats --no-stream --format "table {{ '{{' }}.Container{{ '}}' }}\t{{ '{{' }}.CPUPerc{{ '}}' }}\t{{ '{{' }}.MemUsage{{ '}}' }}" $CONTAINER_NAME
        echo ""
    fi
    
    # Disk usage
    echo -e "${BLUE}üíæ Data Directory:${NC}"
    if [ -d "$DATA_DIR" ]; then
        du -sh "$DATA_DIR"
        echo ""
    fi
    
    # API test
    echo -e "${BLUE}üåê API Connectivity:${NC}"
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:8983/solr/admin/cores | grep -q "200"; then
        echo -e "${GREEN}‚úÖ API responding (HTTP 200)${NC}"
    else
        echo -e "${RED}‚ùå API not responding${NC}"
    fi
    
    check_status
}

# Help function
show_help() {
    show_banner
    echo -e "${YELLOW}Available commands:${NC}"
    echo ""
    echo -e "${GREEN}status${NC}     - Check Solr status"
    echo -e "${GREEN}start${NC}      - Start Solr container"
    echo -e "${GREEN}stop${NC}       - Stop Solr container"
    echo -e "${GREEN}restart${NC}    - Restart Solr container"
    echo -e "${GREEN}backup${NC}     - Create backup of Solr data"
    echo -e "${GREEN}reindex${NC}    - Clear index and prepare for reindexing"
    echo -e "${GREEN}logs${NC}       - Show Solr logs (real-time)"
    echo -e "${GREEN}health${NC}     - Run comprehensive health check"
    echo -e "${GREEN}help${NC}       - Show this help message"
    echo ""
    echo -e "${BLUE}Examples:${NC}"
    echo -e "  $0 status"
    echo -e "  $0 restart"
    echo -e "  $0 backup"
    echo ""
}

# Main execution
case "$1" in
    status)
        show_banner
        check_status
        ;;
    start)
        show_banner
        start_solr
        ;;
    stop)
        show_banner
        stop_solr
        ;;
    restart)
        show_banner
        restart_solr
        ;;
    backup)
        show_banner
        backup_solr
        ;;
    reindex)
        show_banner
        reindex_moodle
        ;;
    logs)
        show_banner
        show_logs
        ;;
    health)
        show_banner
        health_check
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        show_help
        echo -e "${RED}Error: Unknown command '$1'${NC}"
        exit 1
        ;;
esac

exit $?
