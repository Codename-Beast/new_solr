# ====================================================================
# ELEDIA SOLR v3.3.1 - Multi-Tenant Solr with Authentication Support
# ====================================================================
FROM solr:9.9.0-slim

# Create configuration structure and scripts
RUN mkdir -p /tmp/moodle-conf/conf && \
    mkdir -p /tmp/scripts && \
    chmod 755 /tmp/scripts && \
    echo 'echo "ðŸš€ Starting Eledia Moodle Solr v3.3.1"' >> /tmp/scripts/start-solr.sh && \
    echo 'SOLR_HOME="/var/solr/data"' >> /tmp/scripts/start-solr.sh && \
    echo 'mkdir -p "$SOLR_HOME"' >> /tmp/scripts/start-solr.sh && \
    echo '# Fix volume permissions for Docker volumes mounted as root' >> /tmp/scripts/start-solr.sh && \
    echo 'if [ "$(id -u)" = "0" ]; then' >> /tmp/scripts/start-solr.sh && \
    echo '  echo "ðŸ”§ Fixing volume permissions as root..."' >> /tmp/scripts/start-solr.sh && \
    echo '  chown -R solr:solr /var/solr/ 2>/dev/null || true' >> /tmp/scripts/start-solr.sh && \
    echo '  echo "ðŸ”„ Re-executing as solr user..."' >> /tmp/scripts/start-solr.sh && \
    echo '  export > /tmp/env_vars.sh' >> /tmp/scripts/start-solr.sh && \
    echo '  exec su solr -c "source /tmp/env_vars.sh; PATH=/opt/solr/bin:\$PATH $0 $*"' >> /tmp/scripts/start-solr.sh && \
    echo 'fi' >> /tmp/scripts/start-solr.sh && \
    echo 'export SOLR_JAVA_MEM="-Xms${SOLR_MEMORY} -Xmx${SOLR_MEMORY}"' >> /tmp/scripts/start-solr.sh

# ==============================================================================
# Eledia Moodle Solr - Optimized Dockerfile v3.3.1
# maintainer: Bernd Schreistetter, Eledia GmbH
#
# ==============================================================================

LABEL maintainer="eledia-ops@eledia.de" \
      version="3.3.1" \
      description="eledia Moodle Solr - Size Optimized" \
      org.opencontainers.image.version="3.3.1"

USER root

# Install only essential dependencies (minimal footprint)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl jq netcat-traditional && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    mkdir -p /tmp/scripts /tmp/moodle-conf /var/solr/backups /tmp/health && \
    chown -R solr:solr /tmp/scripts /tmp/moodle-conf /var/solr/backups /tmp/health

# Environment variables - AUTHENTICATION REMOVED (handled by security_management.yml)
ENV MOODLE_APP_DOMAIN="" \
    MOODLE_VERSION="45" \
    CREATE_MAIN_CORE="true" \
    SOLR_SERVER_MODE="single-tenant" \
    SOLR_MEMORY="2g" \
    SOLR_LOG_LEVEL="INFO" \
    ENABLE_METRICS="true" \
    METRICS_PORT="9854" \
    SOLR_TIMEZONE="UTC"

# Copy configuration files
COPY conf/ /tmp/moodle-conf/conf/

# Start as root to fix volume permissions, then switch to solr user
# USER solr

# Create scripts - Status Check (NO AUTH - handled by security_management.yml)
RUN echo '#!/bin/bash' > /tmp/scripts/status-check.sh && \
    echo 'set -euo pipefail' >> /tmp/scripts/status-check.sh && \
    echo '# Simple connectivity check - no authentication required for health check' >> /tmp/scripts/status-check.sh && \
    echo 'nc -z localhost 8983 2>/dev/null || { echo "{"status":"error","message":"Solr not responding"}"; exit 1; }' >> /tmp/scripts/status-check.sh && \
    echo '# Try to get version without auth first, then with basic check' >> /tmp/scripts/status-check.sh && \
    echo 'version=$(timeout 10 curl -sf "http://localhost:8983/solr/admin/info/system?wt=json" 2>/dev/null | jq -r ".lucene.\"solr-spec-version\" // \"unknown\"" || echo "unknown")' >> /tmp/scripts/status-check.sh && \
    echo 'echo "{"status":"healthy","timestamp":"$(date -Iseconds)","version":"$version","server":{"running":true,"port":8983}}"' >> /tmp/scripts/status-check.sh && \
    chmod +x /tmp/scripts/status-check.sh

# Create scripts - Customer Management
RUN echo '#!/bin/bash' > /tmp/scripts/create-customer.sh && \
    echo 'set -euo pipefail' >> /tmp/scripts/create-customer.sh && \
    echo 'CUSTOMER_NAME="${1:-}"; MOODLE_VERSION="${2:-}"; PASSWORD="${3:-}"' >> /tmp/scripts/create-customer.sh && \
    echo '[ -z "$CUSTOMER_NAME" ] && { echo "{"status":"error","message":"Customer name required"}"; exit 1; }' >> /tmp/scripts/create-customer.sh && \
    echo 'CLEAN_CUSTOMER=$(echo "$CUSTOMER_NAME" | cut -d"." -f1 | sed "s/[^a-zA-Z0-9_-]//g" | tr "[:upper:]" "[:lower:]")' >> /tmp/scripts/create-customer.sh && \
    echo 'CORE_NAME="eledia_solr_${CLEAN_CUSTOMER}"' >> /tmp/scripts/create-customer.sh && \
    echo 'if solr create_core -c "$CORE_NAME" -d /tmp/moodle-conf/conf 2>&1; then' >> /tmp/scripts/create-customer.sh && \
    echo '  echo "{"status":"success","core_name":"$CORE_NAME","customer":"$CUSTOMER_NAME","timestamp":"$(date -Iseconds)"}"' >> /tmp/scripts/create-customer.sh && \
    echo 'else' >> /tmp/scripts/create-customer.sh && \
    echo '  echo "{"status":"error","message":"Core creation failed"}"' >> /tmp/scripts/create-customer.sh && \
    echo 'fi' >> /tmp/scripts/create-customer.sh && \
    chmod +x /tmp/scripts/create-customer.sh

# Create scripts - Startup
RUN echo '#!/bin/bash' > /tmp/scripts/start-solr.sh && \
    echo 'set -euo pipefail' >> /tmp/scripts/start-solr.sh && \
    echo 'echo "ðŸš€ Starting Eledia Moodle Solr v3.3.1"' >> /tmp/scripts/start-solr.sh && \
    echo 'SOLR_HOME="/var/solr/data"' >> /tmp/scripts/start-solr.sh && \
    echo 'mkdir -p "$SOLR_HOME"' >> /tmp/scripts/start-solr.sh && \
    echo '# Fix volume permissions for Docker volumes mounted as root' >> /tmp/scripts/start-solr.sh && \
    echo 'if [ "$(id -u)" = "0" ]; then' >> /tmp/scripts/start-solr.sh && \
    echo '  echo "ðŸ”§ Fixing volume permissions as root..."' >> /tmp/scripts/start-solr.sh && \
    echo '  chown -R solr:solr /var/solr/ 2>/dev/null || true' >> /tmp/scripts/start-solr.sh && \
    echo '  echo "ðŸ”„ Re-executing as solr user..."' >> /tmp/scripts/start-solr.sh && \
    echo '  export > /tmp/env_vars.sh' >> /tmp/scripts/start-solr.sh && \
    echo '  exec su solr -c "source /tmp/env_vars.sh; PATH=/opt/solr/bin:\$PATH $0 $*"' >> /tmp/scripts/start-solr.sh && \
    echo 'fi' >> /tmp/scripts/start-solr.sh && \
    echo 'export SOLR_JAVA_MEM="-Xms${SOLR_MEMORY} -Xmx${SOLR_MEMORY}"' >> /tmp/scripts/start-solr.sh && \
    echo 'export SOLR_OPTS="-Dsolr.log.level=${SOLR_LOG_LEVEL} -Duser.timezone=${SOLR_TIMEZONE}"' >> /tmp/scripts/start-solr.sh && \
    echo '# Start Solr WITHOUT authentication - security_management.yml will handle auth' >> /tmp/scripts/start-solr.sh && \
    echo 'solr start -m "${SOLR_MEMORY}" -force' >> /tmp/scripts/start-solr.sh && \
    echo 'sleep 10' >> /tmp/scripts/start-solr.sh && \
    echo 'if [ "$CREATE_MAIN_CORE" = "true" ]; then' >> /tmp/scripts/start-solr.sh && \
    echo '  if [ "$SOLR_SERVER_MODE" = "multi-tenant" ]; then' >> /tmp/scripts/start-solr.sh && \
    echo '    solr create_core -c "main_core" -d /tmp/moodle-conf 2>/dev/null || true' >> /tmp/scripts/start-solr.sh && \
    echo '  else' >> /tmp/scripts/start-solr.sh && \
    echo '    for version in 40 41 45 50 51; do' >> /tmp/scripts/start-solr.sh && \
    echo '      solr create_core -c "main_core_$version" -d /tmp/moodle-conf 2>/dev/null || true' >> /tmp/scripts/start-solr.sh && \
    echo '    done' >> /tmp/scripts/start-solr.sh && \
    echo '  fi' >> /tmp/scripts/start-solr.sh && \
    echo 'fi' >> /tmp/scripts/start-solr.sh && \
    echo 'if [ -n "$MOODLE_APP_DOMAIN" ] && [ "$SOLR_SERVER_MODE" = "single-tenant" ]; then' >> /tmp/scripts/start-solr.sh && \
    echo '  /tmp/scripts/create-customer.sh "$MOODLE_APP_DOMAIN" "$MOODLE_VERSION" "auto" || true' >> /tmp/scripts/start-solr.sh && \
    echo 'fi' >> /tmp/scripts/start-solr.sh && \
    echo 'touch /tmp/solr-ready' >> /tmp/scripts/start-solr.sh && \
    echo 'echo "ðŸŽ‰ Eledia Moodle Solr is ready!"' >> /tmp/scripts/start-solr.sh && \
    echo 'solr stop -force >/dev/null 2>&1 || true' >> /tmp/scripts/start-solr.sh && \
    echo 'sleep 2' >> /tmp/scripts/start-solr.sh && \
    echo '# Start Solr in foreground WITHOUT authentication (security_management.yml handles auth)' >> /tmp/scripts/start-solr.sh && \
    echo 'exec solr -f -m "${SOLR_MEMORY}"' >> /tmp/scripts/start-solr.sh && \
    chmod +x /tmp/scripts/start-solr.sh

# Create health check
RUN echo '#!/bin/bash' > /tmp/scripts/healthcheck.sh && \
    echo '/tmp/scripts/status-check.sh >/dev/null 2>&1' >> /tmp/scripts/healthcheck.sh && \
    chmod +x /tmp/scripts/healthcheck.sh

# Expose ports
EXPOSE 8983 9854

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=5 \
    CMD /tmp/scripts/healthcheck.sh

# Set working directory
WORKDIR /var/solr

# Start command
CMD ["/tmp/scripts/start-solr.sh"]